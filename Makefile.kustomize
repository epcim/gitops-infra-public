# vim: ts=2 sw=2

# UPDATE: I fully transitionn to kluctl.io approach!
# DEPRECATED
#
# alternative to `kubectl kustomize` or `kubectl apply -k`
# - it renders Kustomize resources to .build directory
# - it store all-in-one .build/.rendered.yaml (optional, for cicd diff purpose)
#
# secrets & params
# - it interpolate `.params.env` before apply
# - it un/seal credentials SealedSecrets,Sops
#
# other
# - colorized output, simplified diff
# - mount local/private repositories (faster build, no credentials)


# USAGE
# make help
# make a=grafana [render|build|print|diff|apply|...]


# ARGS
# 'p' as an 'path/to/app' is an kustomize build directory
# if not provided last one used is read from symlink `_`.
s ?= $(shell realpath --relative-base "$$PWD" "_" )


# NORMALIZE 'a', prepend 'apps/' if not provided
PTH=$(s)
ifeq (,$(findstring /,$(s)))
PTH=service/$(s)
endif

# DEFAULTS
BUILD_DIR := ./.build
KUBECTL_BIN ?= kubectl
KUSTOMIZE_BIN ?= kustomize
KUSTOMIZE_MNT ?= --mount type=bind,src="$(PWD)/.repos",dst=/r/repos --mount type=bind,src="$(PWD)/$(PTH)",dst=/s
KUSTOMIZE_ARG ?= --enable-alpha-plugins --load-restrictor LoadRestrictionsNone --network #$(KUSTOMIZE_MNT)
COLORIZER_DIFF ?= bat --paging=never -pl diff

.PHONY: env help render build update diff force
.DEFAULT_GOAL := diff

help:
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| sed -ne's/^\(.*\):\s*\(.*\)##\(.*\)/\1 @ \3/p' | column -c1 -ts "@";

env: ## Source .envrc and configure _ shortcut
	@echo "# $(PTH)"
	@ln -sTf $(PTH) _

# universal target
%:
	@make p=$@

## K8S

.ONESHELL:
render: env
	$(KUBECTL_BIN) kustomize $(KUSTOMIZE_ARG) $(PTH)

.ONESHELL:
show: env
	@bat .build/$(PTH)/.rendered.yaml 2>/dev/null ||\
	 cat .build/$(PTH)/.rendered.yaml

.ONESHELL:
apply: env .build/$(PTH)/.rendered.yaml ## Kubectl diff & apply
	@test -e .params.env && source .params.env || true;
	@cat .build/$(PTH)/.rendered.yaml\
		| ./.scripts/param-subst.sh \
		| kubectl apply -f -; \


build: env clean_build .build/$(PTH)/.rendered.yaml

# With `kubectl kustomize`
.ONESHELL:
.build/$(PTH)/.rendered.yaml: # generate all-in-one .build/$(PTH)/.rendered.yaml for diff,cicd
	@#test -e .params.env && source .params.env || true;
	@test -e .build/$(PTH) || mkdir -p .build/$(PTH);
	@rm -f .build/$(PTH)/.rendered.yaml;
	$(KUBECTL_BIN) kustomize $(KUSTOMIZE_ARG) $(PTH) -o .build/$(PTH);
	@find .build/$(PTH)  -name "*.yaml" -o -name "*.yml" | grep -v '.rendered*' |\
		xargs -rI% sh -c "echo '---' ; cat % " \
		>> .build/$(PTH)/.rendered.yaml


.ONESHELL:
diff: env build
	@# diff live version, ignore technical fields and empty lines
	@test -e .params.env && source .params.env || true;
	@cat .build/$(PTH)/.rendered.yaml \
		| ./.scripts/param-subst.sh \
	  | kubectl diff -f -\
		| egrep -v '({}|f:|k:|fields[A-Z]+|time:)' \
	  | sed -e '/^\s*$$/d' | sed -e '/^#.*/d' \
		>| .diff
	@# evaluate
	@if [[ $$(wc -l .diff|cut -c1) -gt 0 ]]; then \
			$(COLORIZER_DIFF) .diff;\
	else\
			echo "No change"; \
	fi
	@rm .diff

## SECRETS

unseal: unseal-sops

unseal-sops: ## SOPS Decrypt all secrets (suffix: .enc and .enc.yaml)
	@find $(PTH) -name "*.enc" -type f -o -name "*.enc.*" -type f |\
		while read file; do \
		  ./.scripts/unseal-sops $$file;\
		done;


